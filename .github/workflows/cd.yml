on:
  push:
    branches:
      - master

name: CI/CD
concurrency: Development

defaults:
  run:
    shell: bash

jobs:
  ui-build-and-test:
    name: '[UI] Build and test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ./ui

      - name: Build
        run: npm run build:ci
        working-directory: ./ui

      - name: Lint
        run: npm run lint:ci
        working-directory: ./ui

      - name: Test
        run: npm run test:ci
        working-directory: ./ui

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-dist
          path: ./ui/dist
          if-no-files-found: error
          retention-days: 30

  ui-build-docker:
    name: '[UI] Build Docker'
    runs-on: ubuntu-latest
    needs:
      - ui-build-and-test
      - api-build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ui-dist
          path: ./ui/dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/zemcikerik/schema-lens/ui

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  api-build-and-test:
    name: '[API] Build and test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build and test
        run: ./gradlew build
        working-directory: ./api

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-dist
          if-no-files-found: error
          retention-days: 30
          path: |
            ./api/build/libs
            !./api/build/libs/*-plain.jar

  api-build-docker:
    name: '[API] Build Docker'
    runs-on: ubuntu-latest
    needs:
      - api-build-and-test
      - ui-build-and-test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: api-dist
          path: ./api/build/libs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/zemcikerik/schema-lens/api

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: Development
    needs:
      - ui-build-docker
      - api-build-docker
    steps:
      - name: Install Wireguard
        run: sudo apt install wireguard

      - name: Decode and save Wireguard config
        run: |
          install -m 600 -D /dev/null ./wg1.conf
          echo $DEPLOY_WIREGUARD_CONFIG_BASE64 | base64 --decode > ./wg1.conf
        env:
          DEPLOY_WIREGUARD_CONFIG_BASE64: ${{ secrets.DEPLOY_WIREGUARD_CONFIG_BASE64 }}

      - name: Connect to deployment network
        id: connect-to-network
        run: sudo wg-quick up ./wg1.conf

      - name: Decode and save SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/private.key
          echo $DEPLOY_SSH_KEY_BASE64 | base64 --decode > ~/.ssh/private.key
        env:
          DEPLOY_SSH_KEY_BASE64: ${{ secrets.DEPLOY_SSH_KEY_BASE64 }}

      - name: Set up SSH config
        run: |
          cat >> ~/.ssh/config <<EOF
          Host deploy
            HostName $DEPLOY_SSH_HOST
            Port $DEPLOY_SSH_PORT
            User $DEPLOY_SSH_USER
            IdentityFile ~/.ssh/private.key
          EOF
        env:
          DEPLOY_SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}
          DEPLOY_SSH_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
          DEPLOY_SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}

      - name: Set up SSH known hosts
        run: echo $DEPLOY_SSH_KNOWN_HOSTS > ~/.ssh/known_hosts
        env:
          DEPLOY_SSH_KNOWN_HOSTS: ${{ secrets.DEPLOY_SSH_KNOWN_HOSTS }}

      - name: Deploy
        run: ssh -o ConnectTimeout=30 -o ConnectionAttempts=1 deploy

      - name: Disconnect from deployment network
        if: ${{ always() && steps.connect-to-network.outcome == 'success' }}
        run: sudo wg-quick down ./wg1.conf
