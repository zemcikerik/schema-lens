import { expect } from '@std/expect';
import server from './main.ts';

Deno.test(async function notFound() {
  const req = new Request('https://example.org');
  const res = await server.fetch(req);
  expect(res.status).toEqual(404);
});

Deno.test(async function healthUnsupportedMethod() {
  const req = new Request('https://example.org/health', { method: 'POST' });
  const res = await server.fetch(req);
  expect(res.status).toEqual(405);
});

Deno.test(async function healthSuccess() {
  const req = new Request('https://example.org/health');
  const res = await server.fetch(req);
  expect(res.status).toEqual(200);
  expect(JSON.parse(await res.text())).toEqual({ status: 'UP' });
});

Deno.test(async function oracleUnsupportedMethod() {
  const req = new Request('https://example.org/oracle', { method: 'GET' });
  const res = await server.fetch(req);
  expect(res.status).toEqual(405);
});

Deno.test(async function oracleUnsupportedContentType() {
  const req = new Request('https://example.org/oracle', { method: 'POST', body: 'SELECT 1 FROM dual;' });
  const res = await server.fetch(req);
  expect(res.status).toEqual(400);
});

Deno.test(async function oracleFormatSql() {
  const sql = `

  CREATE GLOBAL TEMPORARY TABLE "UNIQUE_USERNAME"."HT_PROJECT_CONNECTION_INFO" 
   (\t"ID" NUMBER(19,0) NOT NULL ENABLE
   ) ON COMMIT DELETE ROWS ;
ALTER TABLE "UNIQUE_USERNAME"."HT_PROJECT_CONNECTION_INFO" ADD PRIMARY KEY ("ID") ENABLE;


  CREATE TABLE "UNIQUE_USERNAME"."PROJECT" 
   (\t"ID" NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
\t"UUID" RAW(16) NOT NULL ENABLE, 
\t"NAME" VARCHAR2(64) NOT NULL ENABLE, 
\t"OWNER_ID" NUMBER(38,0) NOT NULL ENABLE
   ) ;
ALTER TABLE "UNIQUE_USERNAME"."PROJECT" ADD CONSTRAINT "PK_PROJECT" PRIMARY KEY ("ID")
  USING INDEX  ENABLE;
ALTER TABLE "UNIQUE_USERNAME"."PROJECT" ADD CONSTRAINT "UC_PROJECT_UUID" UNIQUE ("UUID")
  USING INDEX  ENABLE;
ALTER TABLE "UNIQUE_USERNAME"."PROJECT" ADD CONSTRAINT "FK_PROJECT_ON_OWNER_ID" FOREIGN KEY ("OWNER_ID")
\t  REFERENCES "UNIQUE_USERNAME"."REGISTERED_USER" ("ID") ON DELETE CASCADE ENABLE;
  `;

  const req = new Request('https://example.org/oracle', {
    method: 'POST',
    body: sql,
    headers: { 'Content-Type': 'application/sql' },
  });
  const res = await server.fetch(req);
  expect(res.status).toEqual(200);
  expect(res.headers.get('Content-Type')).toEqual('application/sql');

  expect(await res.text()).toEqual(`
CREATE GLOBAL TEMPORARY TABLE "UNIQUE_USERNAME"."HT_PROJECT_CONNECTION_INFO" ("ID" NUMBER(19, 0) NOT NULL ENABLE) ON COMMIT DELETE ROWS;

ALTER TABLE "UNIQUE_USERNAME"."HT_PROJECT_CONNECTION_INFO"
ADD PRIMARY KEY ("ID") ENABLE;

CREATE TABLE "UNIQUE_USERNAME"."PROJECT" (
  "ID" NUMBER(38, 0) GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1
  START WITH 1 CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE NOT NULL ENABLE,
  "UUID" RAW(16) NOT NULL ENABLE,
  "NAME" VARCHAR2(64) NOT NULL ENABLE,
  "OWNER_ID" NUMBER(38, 0) NOT NULL ENABLE
);

ALTER TABLE "UNIQUE_USERNAME"."PROJECT"
ADD CONSTRAINT "PK_PROJECT" PRIMARY KEY ("ID") USING INDEX ENABLE;

ALTER TABLE "UNIQUE_USERNAME"."PROJECT"
ADD CONSTRAINT "UC_PROJECT_UUID" UNIQUE ("UUID") USING INDEX ENABLE;

ALTER TABLE "UNIQUE_USERNAME"."PROJECT"
ADD CONSTRAINT "FK_PROJECT_ON_OWNER_ID" FOREIGN KEY ("OWNER_ID") REFERENCES "UNIQUE_USERNAME"."REGISTERED_USER" ("ID") ON DELETE CASCADE ENABLE;
  `.trim());
});
